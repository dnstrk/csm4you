/*модалки */
class bfmodal {
    constructor(props) {
      const defaultConfig = {
        backscroll: true,
        linkAttributeName: 'data-bfmodal',
        closeOnOverlay: true,
        closeOnEsc: true,
        closeOnButton: true,
        waitTransitions: false,
        catchFocus: true,
        fixedSelectors: '*[data-hystfixed]',
        beforeOpen: () => {},
        afterClose: () => {},
      };
      this.config = Object.assign(defaultConfig, props);
      if (this.config.linkAttributeName) {
        this.init();
      }
      this._closeAfterTransition = this._closeAfterTransition.bind(this);
    }
  
    init() {
      this.isOpened = false;
      this.openedWindow = false;
      this.starter = false;
      this._nextWindows = false;
      this._scrollPosition = 0;
      this._reopenTrigger = false;
      this._overlayChecker = false;
      this._isMoved = false;
      this._focusElements = [
        'a[href]',
        'area[href]',
        'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',
        'select:not([disabled]):not([aria-hidden])',
        'textarea:not([disabled]):not([aria-hidden])',
        'button:not([disabled]):not([aria-hidden])',
        'iframe',
        'object',
        'embed',
        '[contenteditable]',
        '[tabindex]:not([tabindex^="-"])',
      ];
      this._modalBlock = false;
  
      const existingShadow = document.querySelector('.bfmodal__shadow');
      if (existingShadow) {
        this.shadow = existingShadow;
      } else {
        this.shadow = document.createElement('div');
        this.shadow.classList.add('bfmodal__shadow');
        document.body.appendChild(this.shadow);
      }
      this.eventsFeeler();
    }
  
    eventsFeeler() {
      document.addEventListener('click', (e) => {
        const clickedlink = e.target.closest(`[${this.config.linkAttributeName}]`);
        if (!this._isMoved && clickedlink) {
          e.preventDefault();
          this.starter = clickedlink;
          const targetSelector = this.starter.getAttribute(this.config.linkAttributeName);
          this._nextWindows = document.querySelector(targetSelector);
          this.open();
          return;
        }
        if (this.config.closeOnButton && e.target.closest('[data-hystclose]')) {
          this.close();
        }
      });
  
      if (this.config.closeOnOverlay) {
        document.addEventListener('mousedown', (e) => {
          if (!this._isMoved && (e.target instanceof Element) && !e.target.classList.contains('bfmodal__wrap')) return;
          this._overlayChecker = true;
        });
  
        document.addEventListener('mouseup', (e) => {
          if (!this._isMoved && (e.target instanceof Element) && this._overlayChecker && e.target.classList.contains('bfmodal__wrap')) {
            e.preventDefault();
            this._overlayChecker = !this._overlayChecker;
            this.close();
            return;
          }
          this._overlayChecker = false;
        });
      }
  
      window.addEventListener('keydown', (e) => {
        if (!this._isMoved && this.config.closeOnEsc && e.which === 27 && this.isOpened) {
          e.preventDefault();
          this.close();
          return;
        }
        if (!this._isMoved && this.config.catchFocus && e.which === 9 && this.isOpened) {
          this.focusCatcher(e);
        }
      });
    }
  
    open(selector) {
      if (selector) {
        if (typeof (selector) === 'string') {
          this._nextWindows = document.querySelector(selector);
        } else {
          this._nextWindows = selector;
        }
      }
      if (!this._nextWindows) {
        console.log('Warning: bfmodal selector is not found');
        return;
      }
      if (this.isOpened) {
        this._reopenTrigger = true;
        this.close();
        return;
      }
      this.openedWindow = this._nextWindows;
      this._modalBlock = this.openedWindow.querySelector('.bfmodal__window');
      this.config.beforeOpen(this);
      this._bodyScrollControl();
      this.shadow.classList.add('bfmodal__shadow--show');
      this.openedWindow.classList.add('bfmodal--active');
      this.openedWindow.setAttribute('aria-hidden', 'false');
      if (this.config.catchFocus) this.focusControl();
      this.isOpened = true;
    }
  
    close() {
      if (!this.isOpened) {
        return;
      }
      if (this.config.waitTransitions) {
        this.openedWindow.classList.add('bfmodal--moved');
        this._isMoved = true;
        this.openedWindow.addEventListener('transitionend', this._closeAfterTransition);
        this.openedWindow.classList.remove('bfmodal--active');
      } else {
        this.openedWindow.classList.remove('bfmodal--active');
        this._closeAfterTransition();
      }
    }
  
    _closeAfterTransition() {
      this.openedWindow.classList.remove('bfmodal--moved');
      this.openedWindow.removeEventListener('transitionend', this._closeAfterTransition);
      this._isMoved = false;
      this.shadow.classList.remove('bfmodal__shadow--show');
      this.openedWindow.setAttribute('aria-hidden', 'true');
  
      if (this.config.catchFocus) this.focusControl();
      this._bodyScrollControl();
      this.isOpened = false;
      this.openedWindow.scrollTop = 0;
      this.config.afterClose(this);
  
      if (this._reopenTrigger) {
        this._reopenTrigger = false;
        this.open();
      }
    }
  
    focusControl() {
      const nodes = this.openedWindow.querySelectorAll(this._focusElements);
      if (this.isOpened && this.starter) {
        this.starter.focus();
      } else if (nodes.length) nodes[0].focus();
    }
  
    focusCatcher(e) {
      const nodes = this.openedWindow.querySelectorAll(this._focusElements);
      const nodesArray = Array.prototype.slice.call(nodes);
      if (!this.openedWindow.contains(document.activeElement)) {
        nodesArray[0].focus();
        e.preventDefault();
      } else {
        const focusedItemIndex = nodesArray.indexOf(document.activeElement);
        if (e.shiftKey && focusedItemIndex === 0) {
          nodesArray[nodesArray.length - 1].focus();
          e.preventDefault();
        }
        if (!e.shiftKey && focusedItemIndex === nodesArray.length - 1) {
          nodesArray[0].focus();
          e.preventDefault();
        }
      }
    }
  
    _bodyScrollControl() {
      if (!this.config.backscroll) return;
  
      // collect fixed selectors to array
      const fixedSelectorsElems = document.querySelectorAll(this.config.fixedSelectors);
      const fixedSelectors = Array.prototype.slice.call(fixedSelectorsElems);
  
      const html = document.documentElement;
      if (this.isOpened === true) {
        html.classList.remove('bfmodal__opened');
        html.style.marginRight = '';
        fixedSelectors.forEach((el) => {
          el.style.marginRight = '';
        });
        window.scrollTo(0, this._scrollPosition);
        html.style.top = '';
        return;
      }
      this._scrollPosition = window.pageYOffset;
      const marginSize = window.innerWidth - html.clientWidth;
      html.style.top = `${-this._scrollPosition}px`;
  
      if (marginSize) {
        html.style.marginRight = `${marginSize}px`;
        fixedSelectors.forEach((el) => {
          el.style.marginRight = `${parseInt(getComputedStyle(el).marginRight, 10) + marginSize}px`;
        });
      }
      html.classList.add('bfmodal__opened');
    }
  }
  const myModal = new bfmodal({
    catchFocus: true,
    closeOnEsc: true,
    backscroll: true,
    beforeOpen: function (modal) {
      // console.log('Message before opening the modal');
      // console.log(modal);
    },
    afterClose: function (modal) {
      // console.log('Message after modal has closed');
      // console.log(modal);
  
      let videoframe = modal.openedWindow.querySelector('iframe');
      if (videoframe) {
        videoframe.contentWindow.postMessage('{"event":"command","func":"stopVideo","args":""}', '*');
      }
    },
  });
  
  // липкая шапка
var header = jQuery('.header'),
	scrollPrev = 0;
  let menuElem = jQuery('.header'),
  menuFixed = 100, 
  menuStatus = false; 
  jQuery(window).on('scroll' ,function() {
	var scrolled = jQuery(window).scrollTop();
  if ( scrolled > 10) {
		header.addClass('fixed');
	}
  else if( scrolled > scrollPrev ) {
   	header.removeClass('fixed');
   
  }
  else {
     header.removeAttr('style').removeClass('fixed'); 
  }
	scrollPrev = scrolled;
});
jQuery("#hamburger").on('click', function(){
	jQuery(this).toggleClass("open");
	jQuery("#header-nav").toggleClass('open')
});
jQuery(document).ready(function($){
		$('.main-menu-item.active').append("<div class='wee'></div>");
		if ($('.main-menu-item.active').length) {
		var $thisnav = $('.main-menu-item.active').offset().left;
		$('.main-menu-item').hover(function () {
			var $left = $(this).offset().left - $thisnav;
			var $width = $(this).outerWidth();
			var $start = 0;
			$('.wee').css({'left': $left, 'width': $width});
			}, function () {
				var $initwidth = $('.main-menu-item.active').width();
				$('.wee').css({'left': '0', 'width': $initwidth});
			});
		}
		$('.header-links__item').on('click', function(){
			$(this).toggleClass('active')
		})
});
//подвигаем эллипсы
var items = document.querySelectorAll('.blobs img');
var layer = document.querySelector('.blobs');
items.forEach(item => requestAnimationFrame(() => move(item)));
function move(el) {
  var s = Math.random() > 0.5 ? 1 : -1;
	var x = s * (Math.random() * 20);
  var y = s * (Math.random() * 20);
  var td = Math.random() * 8 + 1;
  el.style.transitionDuration = `${td}s`;
  el.style.transform = `translate3d(${x}px, ${y}px, 0)`;
  setTimeout(function() {
    requestAnimationFrame(() => move(el));
  }, td * 1000);
}
/*карусель*/
var autoSwap = setInterval( swap,3500);
jQuery('.carousel, span').hover(
  function () {
    clearInterval(autoSwap);
}, 
  function () {
   autoSwap = setInterval( swap,3500);
});
var items = [];
var startItem = 1;
var position = 0;
var itemCount = jQuery('.carousel li.carusel__item').length;
var leftpos = itemCount;
var resetCount = itemCount;

jQuery('li.carusel__item').each(function(index) {
    items[index] = jQuery(this).text();
});
function swap(action) {
  var direction = action;
  if(direction == 'counter-clockwise') {
    var leftitem = $('.left-pos').attr('id') - 1;
    if(leftitem == 0) {
      leftitem = itemCount;
    }
    
    jQuery('.right-pos').removeClass('right-pos').addClass('back-pos');
    jQuery('.main-pos').removeClass('main-pos').addClass('right-pos');
    jQuery('.left-pos').removeClass('left-pos').addClass('main-pos');
    jQuery('#'+leftitem+'').removeClass('back-pos').addClass('left-pos');
    
    startItem--;
    if(startItem < 1) {
      startItem = itemCount;
    }
  }
  if(direction == 'clockwise' || direction == '' || direction == null ) {
    function pos(positionvalue) {
      if(positionvalue != 'leftposition') {
        position++;
        if((startItem+position) > resetCount) {
          position = 1-startItem;
        }
      }
      if(positionvalue == 'leftposition') {
        position = startItem - 1;
        if(position < 1) {
          position = itemCount;
        }
      }
    return position;
    }  
  
   jQuery('#'+ startItem +'').removeClass('main-pos').addClass('left-pos');
   jQuery('#'+ (startItem+pos()) +'').removeClass('right-pos').addClass('main-pos');
   jQuery('#'+ (startItem+pos()) +'').removeClass('back-pos').addClass('right-pos');
   jQuery('#'+ pos('leftposition') +'').removeClass('left-pos').addClass('back-pos');
  
    startItem++;
    position=0;
    if(startItem > itemCount) {
      startItem = 1;
    }
	jQuery('.paginate__item').removeClass('active');
  //это для тг добавлено
	jQuery('.paginate__item-tg').removeClass('active');
	var id = jQuery(".main-pos").attr("id")
  } jQuery('[data-id ='+id +' ]').addClass('active');
}
jQuery('#next').click(function() {
  swap('clockwise');
});
jQuery('#prev').click(function() {
  swap('counter-clockwise');
});
jQuery('li.carusel__item').click(function() {
  if($(this).attr('class') == 'carusel__item left-pos') {
     swap('counter-clockwise'); 
  }
  else {
    swap('clockwise'); 
  }
});
//слайдер доктора
if(document.getElementById("splide-doctors")) {
    var banner =  document.getElementById('splide-doctors') 
    var splide = new Splide( banner, {
      type   : 'loop',
      perPage: 4,
      perMove: 1,
      autoplay:false,
      pauseOnHover:true,
      pauseOnFocus: true,
      arrows:true,
	  pagination: false,
	   breakpoints: {
		600: {
			perPage: 1,
		},
		820: {
			perPage: 2,
		},
	   }
    }); 
  splide.on( 'mounted', function() {
        // if fewer slides than provided in options, set option to the number of slides
        if ( splide.length <= splide.options.perPage ) {
            splide.options.perPage = splide.length;
           
        }
    }); 
    splide.mount();
}
// слайдер новостей
if(document.getElementById("splide-news")) {
    var banner =  document.getElementById('splide-news') 
    var splide1 = new Splide( banner, {
      type   : 'loop',
      perPage: 3,
      perMove: 1,
      autoplay:true,
      pauseOnHover:true,
      pauseOnFocus: true,
      arrows:false,
	  pagination: false,
	   breakpoints: {
		380: {
			perPage: 1,
		},
		820: {
			perPage: 2,
		},
	   }
    }); 
  splide1.on( 'mounted', function() {
        // if fewer slides than provided in options, set option to the number of slides
        if ( splide1.length <= splide1.options.perPage ) {
            splide1.options.perPage = splide1.length;
           
        }
    }); 
    splide1.mount();
	var btnNext =  document.getElementById('arrow-news--next')  
	var btnPrev =  document.getElementById('arrow-news--prev')   	
  btnNext.addEventListener('click', e => {
    splide1.go('+1')
  })

  btnPrev.addEventListener('click', e => {
    splide1.go('-1')
  })
}
if(document.getElementById("splide-tg-news")) {
    var banner =  document.getElementById('splide-tg-news') 
    var splideTg = new Splide( banner, {
      type   : 'loop',
      perPage: 1,
      perMove: 1,
      autoplay:true,
      pauseOnHover:true,
      pauseOnFocus: true,
      arrows:false,
	  pagination: false,
	   breakpoints: {
		380: {
			perPage: 1,
		},
		820: {
			perPage: 1,
		},
	   }
    }); 
  splideTg.on( 'mounted', function() {
        // if fewer slides than provided in options, set option to the number of slides
        if ( splideTg.length <= splideTg.options.perPage ) {
            splideTg.options.perPage = splideTg.length;
           
        }
    }); 
    splideTg.mount();
	var btnNext =  document.getElementById('arrow-news--next-tg') 
	var btnPrev =  document.getElementById('arrow-news--prev-tg')  
  btnNext.addEventListener('click', e => {
    splideTg.go('+1')
  })

  btnPrev.addEventListener('click', e => {
    splideTg.go('-1')
  })
}
//слайдер отзывов
if(document.getElementById("splide-reviews")) {
    var banner =  document.getElementById('splide-reviews') 
    var splide = new Splide( banner, {
      type   : 'slide',
      perPage: 3,
      perMove: 1,
      autoplay:true,
      pauseOnHover:true,
      pauseOnFocus: true,
      arrows:false,
	  pagination: false,
	  classes: {
		// Add classes for arrows.
		arrows: 'splide__arrows reviews-class-arrows',
		arrow : 'splide__arrow reviews-class-arrow',
		prev  : 'splide__arrow--prev reviews-class-prev',
		next  : 'splide__arrow--next reviews-class-next',
	  },
	   breakpoints: {
		380: {
			perPage: 1,
		},
		820: {
			perPage: 2,
		},
	   }
    }); 
  splide.on( 'mounted', function() {
        // if fewer slides than provided in options, set option to the number of slides
        if ( splide.length <= splide.options.perPage ) {
            splide.options.perPage = splide.length;
           
        }
    }); 
    splide.mount();
	  //attach events to custom buttons
	var btnNext =  document.getElementById('arrow-reviews--next')  
	var btnPrev =  document.getElementById('arrow-reviews--prev')   	
  btnNext.addEventListener('click', e => {
    splide.go('+1')
  })

  btnPrev.addEventListener('click', e => {
    splide.go('-1')
  })
}

jQuery(document).ready(function($) {
  // Используем делегирование событий
  $(document).on('click', 'a[href="#"]', function(event) {
      event.preventDefault(); // Отменяем стандартное поведение ссылки
  });
});

jQuery(document).ready(function($) {
  $('.card-review a').on('click', function(e) {
    var $this = $(this);
    var $full = $this.prev('.cardReview__content_full')
    var $cut = $full.prev('.cardReview__content_cut')

    if($full.hasClass('review__content_hidden')) {
      $full.removeClass('review__content_hidden')
      $cut.addClass('review__content_hidden')
      $this.text('Свернуть')
    } else {
      $full.addClass('review__content_hidden')
      $cut.removeClass('review__content_hidden')
      $this.text('Развернуть')
    }
  });
});

jQuery(document).ready(function($) {
  $('.modal_spec').on('click', function() {
      var title = $(this).data('title');
      var content = $(this).data('content');
      var excerpt = $(this).data('excerpt');
      var image = $(this).data('image');
      console.log(title);
      console.log(content);
      console.log(excerpt);
      console.log(image);

      $('#modalImage').attr('src', image);
      $('#modalTitle').text(title);
      $('#modalExcerpt').text(excerpt);
      $('#modalContent').html(content);
  }
  )
}
)

// Поля телефона дял аутентификации
const tgPhoneAuth = document.getElementById('tg-auth-phone')
const tgPhoneAuthLabel = document.querySelector('.register-wrap__action_phone label')

if(tgPhoneAuth) {
  tgPhoneAuth.onfocus = () => {
    tgPhoneAuthLabel.classList.add('tg_inp_focus')
  }
  tgPhoneAuth.onblur = () => {
    if(!tgPhoneAuth.value)
      tgPhoneAuthLabel.classList.remove('tg_inp_focus')
  }
}

// маски на инпут с телефоном
$(function(){
  $("#tg-auth-phone").mask("+7 (999) 999-99-99");
  $("#tg-profile-phone").mask("+79999999999");
  $("#online-form-phone").mask("+7 (999) 999-99-99");
  $("#online-form-phone-modal").mask("+7 (999) 999-99-99");

});


// Поля личной информации пользователя в ТГ
const tgPhone = document.getElementById('tg-profile-phone')
const tgName = document.getElementById('tg-profile-name')
const tgSurname = document.getElementById('tg-profile-surname')

const tgPhoneLabel = document.querySelector('.profile-wrap__action_input_phone label')
const tgNameLabel = document.querySelector('.profile-wrap__action_input_name label')
const tgSurnameLabel = document.querySelector('.profile-wrap__action_input_surname label')

if(tgPhone) {
  tgPhone.onfocus = () => {
    tgPhoneLabel.classList.add('tg_inp_focus')
  }
  tgPhone.onblur = () => {
    if(!tgPhone.value)
    tgPhoneLabel.classList.remove('tg_inp_focus')
  }
}
if(tgName) {
  tgName.onfocus = () => {
    tgNameLabel.classList.add('tg_inp_focus')
  }
  tgName.onblur = () => {
    if(!tgName.value)
    tgNameLabel.classList.remove('tg_inp_focus')
  }
}
if(tgSurname) {
  tgSurname.onfocus = () => {
    tgSurnameLabel.classList.add('tg_inp_focus')
  }
  tgSurname.onblur = () => {
    if(!tgSurname.value)
    tgSurnameLabel.classList.remove('tg_inp_focus')
  }
}



jQuery(".select-time__item").on("click", function(){
 
  jQuery(".select-time__item").removeClass("selected");
  jQuery(this).toggleClass('selected');
})

jQuery(document).ready(function($) {
  let currentDate = new Date().toISOString().split('T')[0];
  $('.select-time__item').attr('data-date', currentDate);
  // Инициализация календаря
  new AirDatepicker('#order', {
    inline: true,
    dateFormat:"yyyy-MM-dd",
    altField: "#orderInput",
    timepicker: false,
    view: "days",
      onSelect: function(formattedDate, date, inst) {
        let selectedDate = formattedDate; // formattedDate уже в нужном формате
        let foundAnyMatch = false;
        let dateString = selectedDate.formattedDate; // Форматированная дата в формате 'YYYY-MM-DD'
        
        // Удаление класса active у всех карточек врачей и элементов времени
          $('.card-mobile').removeClass('selected');
          $('.card-mobile').removeClass('active');
          $('.bfmodal-cards-list__item').removeClass('active');
          $('.air-datepicker-cell').removeClass('active');
          // Добавление класса active к соответствующим карточкам врачей и элементам времени
          $('.bfmodal-cards-list__item').each(function() {
            let doctorDates = $(this).find('.data-date');
            let doctorMatchesDate = false;
            doctorDates.each(function() { 
                if ($(this).text().startsWith(selectedDate.formattedDate)) {
                    doctorMatchesDate = true;
                    foundAnyMatch = true;
                    $('.page-cards-list .message').removeClass("active");
                    return false; // прерываем each, если совпадение найдено
                }
            });
            if (doctorMatchesDate) {
                $(this).addClass('active');
                $(this).find(".card-mobile").addClass('active');
                let doctorAllTimes = $(this).attr('data-alltime').split(',');
                $('.select-time__item').removeClass('active');
                // Сравниваем атрибуты времени и даты, добавляем класс active при совпадении
                $('.select-time__item').each(function() {
                  let slotDate = $(this).attr('data-date');
                  let slotTime = $(this).attr('data-time'); 
                  let slotDateTime = slotDate + '-' + slotTime;
                  if (doctorAllTimes.includes(slotDateTime)) {
                    $(this).addClass('active');
                  }
                });

            } else {
                $(this).removeClass('active');
                $(this).find(".card-mobile").removeClass('active');
            }
            
        });
        $('.select-time__item').attr('data-date', selectedDate.formattedDate);
        let newDat =  $('.select-time__item').attr('data-date');
        $('.select-time__item').each(function() {
          let timeSlot = $(this).data('time');
          let slotDate = $(this).data('date');
         // console.log(newDat, slotDate, selectedDate.formattedDate)
          if (newDat === selectedDate.formattedDate) {
           // $(this).addClass('active');
          } else {
          //  $(this).removeClass('active');
          }
        });
          if (!foundAnyMatch) {
            $('.page-cards-list .message').addClass("active");
          }

         
      }
  });
  // Инициализация календаря
  new AirDatepicker('#order-modal', {
    inline: true,
    dateFormat:"yyyy-MM-dd",
    altField: "#orderInputModal",
    timepicker: false,
    view: "days",
      onSelect: function(formattedDate, date, inst) {
        let selectedDate = formattedDate; // formattedDate уже в нужном формате
        let foundAnyMatch = false;
        let dateString = selectedDate.formattedDate; // Форматированная дата в формате 'YYYY-MM-DD'
        
        // Удаление класса active у всех карточек врачей и элементов времени
          $('.card-mobile').removeClass('selected');
          $('.card-mobile').removeClass('active');
          $('.bfmodal-cards-list__item').removeClass('active');
          $('.air-datepicker-cell').removeClass('active');
          // Добавление класса active к соответствующим карточкам врачей и элементам времени
          $('.bfmodal-cards-list__item').each(function() {
            let doctorDates = $(this).find('.data-date');
            let doctorMatchesDate = false;
            doctorDates.each(function() { 
                if ($(this).text().startsWith(selectedDate.formattedDate)) {
                    doctorMatchesDate = true;
                    foundAnyMatch = true;
                    $('.page-cards-list .message').removeClass("active");
                    return false; // прерываем each, если совпадение найдено
                }
            });
            if (doctorMatchesDate) {
                $(this).addClass('active');
                $(this).find(".card-mobile").addClass('active');
                let doctorAllTimes = $(this).attr('data-alltime').split(',');
                $('.select-time__item').removeClass('active');
                // Сравниваем атрибуты времени и даты, добавляем класс active при совпадении
                $('.select-time__item').each(function() {
                  let slotDate = $(this).attr('data-date');
                  let slotTime = $(this).attr('data-time'); 
                  let slotDateTime = slotDate + '-' + slotTime;
                  if (doctorAllTimes.includes(slotDateTime)) {
                    $(this).addClass('active');
                  }
                });

            } else {
                $(this).removeClass('active');
                $(this).find(".card-mobile").removeClass('active');
            }
            
        });
        $('.select-time__item').attr('data-date', selectedDate.formattedDate);
        let newDat =  $('.select-time__item').attr('data-date');
        $('.select-time__item').each(function() {
          let timeSlot = $(this).data('time');
          let slotDate = $(this).data('date');
         // console.log(newDat, slotDate, selectedDate.formattedDate)
          if (newDat === selectedDate.formattedDate) {
           // $(this).addClass('active');
          } else {
          //  $(this).removeClass('active');
          }
        });
          if (!foundAnyMatch) {
            $('.page-cards-list .message').addClass("active");
            $('.select-time__item').removeClass('active');
          }

         
      }
  });

 $(document).on('click', '.bfmodal-cards-list__item', function() {
    // Удаляем класс active у всех карточек
    $('.card-mobile').removeClass('selected');
   // $(this).addClass('active');
    $(this).find(".card-mobile").addClass('selected');

    // Удаляем класс active у всех дат в календаре
    $('.air-datepicker-cell').removeClass('active');

    // Получаем все даты из карточки врача
    let doctorDates = $(this).find('.data-date').map(function() {
      return $(this).text();
    }).get();

    // Добавляем класс active соответствующим датам в календаре
    $('.air-datepicker-cell').each(function() {
      let cellDate = $(this).data('year') + '-' + (('' + ($(this).data('month') + 1)).padStart(2, '0')) + '-' + ('' + $(this).data('date')).padStart(2, '0');
      if (doctorDates.includes(cellDate)) {
        $(this).addClass('active');
      }
    });

    let doctorAllTimes = $(this).attr('data-alltime').split(',');
        // Сравниваем атрибуты времени и даты, добавляем класс active при совпадении
        $('.select-time__item').each(function() {
          let slotDate = $(this).attr('data-date');
          let slotTime = $(this).attr('data-time');
          let slotDateTime = slotDate + '-' + slotTime;

          if (doctorAllTimes.includes(slotDateTime)) {
            $(this).addClass('active');
          }
        });
  });
});


// заполнение поля кода СМС
document.addEventListener('DOMContentLoaded', function() {
  const inputs = document.querySelectorAll('.pincode-input');
  const confirmBtn = document.querySelector('#tg-btn-confirm')
  console.log(confirmBtn)


  inputs.forEach((input, index) => {
      input.addEventListener('input', (event) => {
          if (event.target.value.length === 1) {
              if (index < inputs.length - 1) {
                  inputs[index + 1].disabled = false;
                  inputs[index + 1].focus();
              }
          }
      });

      input.addEventListener('keyup', (event) => {
          if (event.key === 'Backspace' && input.value.length === 0 && index > 0) {
              inputs[index - 1].focus();
              inputs[index].disabled = true;
          }
      });
  });
});

/* скрполлим блоки горизонтально*/
(function() {

  function scrollHorizontally(e) {

    var scrollPos = this.scrollLeft;  // Сколько прокручено по горизонтали, до прокрутки (не перемещать эту строку!)

    // Горизонтальная прокрутка
    e = window.event || e;
    var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
    this.scrollLeft -= (delta*100); // Multiplied by 10

    var widthElem = this.scrollWidth; // Ширина всего элемента
    var widthBrowser = document.documentElement.clientWidth;  // Ширина окна минус размер вертикального скролла


    // Прокрутка вверх, но элемент уже в крайней левой позиции, то двигаемся вверх
    if ((delta == 1 ) && (this.scrollLeft == 0)) return;
    // Прокрутка вниз, но элемент виден полностью. Или элемент до конца прокручен в правый край
    if ((widthBrowser >= widthElem) || (scrollPos == this.scrollLeft)) return;

    e.preventDefault(); // запрещает прокрутку по вертикали

  }

  var elems = document.querySelectorAll('.scrollMouse');
  for (var a = 0; a < elems.length; a++) {
    elems[a].addEventListener("mousewheel", scrollHorizontally, false);     // IE9, Chrome, Safari, Opera
    elems[a].addEventListener("DOMMouseScroll", scrollHorizontally, false); // Firefox
  }

})();



/*карусель тг*/
// var autoSwapTg = setInterval( swapTg,3500);
// jQuery('.carousel-tg, span').hover(
//   function () {
//     clearInterval(autoSwapTg);
// }, 
//   function () {
//    autoSwapTg = setInterval( swapTg,3500);
// });
// var items = [];
// var startItem = 1;
// var position = 0;
// var itemCount = jQuery('.carousel-tg li.carusel__item-tg').length;
// var leftpos = itemCount;
// var resetCount = itemCount;

// jQuery('li.carusel__item-tg').each(function(index) {
//     items[index] = jQuery(this).text();
// });
// function swapTg(action) {
//   var direction = action;
//   if(direction == 'counter-clockwise') {
//     var leftitem = $('.left-pos-tg').attr('id') - 1;
//     if(leftitem == 0) {
//       leftitem = itemCount;
//     }
    
//     jQuery('.right-pos-tg').removeClass('right-pos-tg').addClass('back-pos-tg');
//     jQuery('.main-pos-tg').removeClass('main-pos-tg').addClass('right-pos-tg');
//     jQuery('.left-pos-tg').removeClass('left-pos-tg').addClass('main-pos-tg');
//     jQuery('#'+leftitem+'').removeClass('back-pos-tg').addClass('left-pos-tg');
    
//     startItem--;
//     if(startItem < 1) {
//       startItem = itemCount;
//     }
//   }
//   if(direction == 'clockwise' || direction == '' || direction == null ) {
//     function pos(positionvalue) {
//       if(positionvalue != 'leftposition') {
//         position++;
//         if((startItem+position) > resetCount) {
//           position = 1-startItem;
//         }
//       }
//       if(positionvalue == 'leftposition') {
//         position = startItem - 1;
//         if(position < 1) {
//           position = itemCount;
//         }
//       }
//     return position;
//     }  
  
//    jQuery('#'+ startItem +'').removeClass('main-pos-tg').addClass('left-pos-tg');
//    jQuery('#'+ (startItem+pos()) +'').removeClass('right-pos-tg').addClass('main-pos-tg');
//    jQuery('#'+ (startItem+pos()) +'').removeClass('back-pos-tg').addClass('right-pos-tg');
//    jQuery('#'+ pos('leftposition') +'').removeClass('left-pos-tg').addClass('back-pos-tg');
  
//     startItem++;
//     position=0;
//     if(startItem > itemCount) {
//       startItem = 1;
//     }
// 	jQuery('.paginate__item-tg').removeClass('active-tg');
// 	var id = jQuery(".main-pos-tg").attr("id")
//   } jQuery('[data-id ='+id +' ]').addClass('active-tg');
// }
// jQuery('#next').click(function() {
//   swapTg('clockwise');
// });
// jQuery('#prev').click(function() {
//   swapTg('counter-clockwise');
// });
// jQuery('li.carusel__item-tg').click(function() {
//   if($(this).attr('class') == 'carusel__item-tg left-pos-tg') {
//      swapTg('counter-clockwise'); 
//   }
//   else {
//     swapTg('clockwise'); 
//   }
// });